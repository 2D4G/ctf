
CTF ПЛАН-ШПАРГАЛКА (для сети 10.24.248.79/20)

Авторизованное использование ТОЛЬКО в рамках лаборатории/CTF. Все действия — на вашей собственной тестовой площадке.

===============================================================================
0) КОНТЕКСТ ЗАДАНИЯ (по методичке на фото)
- Надо найти 3 сервера в сети и извлечь флаги/уязвимости.
- В отчёте: логин и ФИО участника, таблица по найденным уязвимостям/задачам.
- Для каждой задачи: название, флаг (строка), классификация уязвимости, описание и алгоритм эксплуатации (пошагово), артефакты/доказательства.
- Для специфичных типов задач (если встретятся): 
  * крипто — корректное описание шифрования/дешифрования;
  * анализ трафика — извлечённые данные и метка времени/контекст передачи (если дан дамп);
  * реверс/forensics — код/действия, извлекающие данные, и описание процесса;
  * стего/OSINT — описание метода/алгоритма поиска и извлечения скрытых данных.
- Итог: понятная воспроизводимая инструкция + флаг.

===============================================================================
1) СЕТЕВОЙ ДИАПАЗОН И БАЗОВЫЕ РАСЧЁТЫ
Дано: 10.24.248.79/20
- Маска /20 = 255.255.240.0
- Сеть: 10.24.240.0
- Broadcast: 10.24.255.255
- Диапазон хостов: 10.24.240.1 – 10.24.255.254 (4094 адреса)

Быстрая проверка в bash:
  ipcalc 10.24.248.79/20  # (если установлен)
или посчитать вручную: /20 → младшие 12 бит для хостов → шаг сети 16 по третьему октету (240).

===============================================================================
2) ОБЗОР ИНСТРУМЕНТОВ
Набор «по умолчанию» (Kali/Parrot/любая Linux):
- Сканирование: nmap, masscan, rustscan, fping/arp-scan
- Веб: curl, wget, whatweb, nikto, gobuster/ffuf/feroxbuster, dirsearch, Burp Suite, wfuzz
- Эксплуатация: sqlmap, hydra/medusa, metasploit (по желанию)
- Протоколы: smbclient, enum4linux-ng, rpcclient, snmpwalk, ldapsearch, ftp, telnet, netcat
- Базы: mysql-client, psql, redis-cli, mongo
- Прочее: john/hashcat, stegseek/zsteg, binwalk, strings, exiftool, foremost/volatility (если дадут образы)

Полезные словари (обычно в /usr/share/seclists):
- Discovery: /usr/share/seclists/Discovery/Web-Content/
- Пароли/логины: /usr/share/seclists/Passwords/ и Usernames/

===============================================================================
3) ПОШАГОВЫЙ ПЛАН РАБОТЫ (скриптуемо)

3.1. Поиск активных хостов
  # ICMP/ARP пинг-скан
  nmap -sn 10.24.240.0/20 -oA scans/00_ping_sweep

  # Альтернатива (быстро, если установлен fping)
  fping -a -g 10.24.240.0/20 2>/dev/null | tee hosts_alive.txt

  # Очень быстрый pass c ограничением скорости (masscan, требует sudo)
  sudo masscan 10.24.240.0/20 -p0-65535 --rate 2000 --wait 2 -oL scans/01_masscan.lst

  Извлечь список IP:
  awk '/Discovered open port/ {print $6}' scans/01_masscan.lst | sort -u > hosts_alive.txt

Ожидаем ~3 интересных хоста (но может быть больше пинговых ответов — не страшно).

3.2. Базовое сканирование портов и сервисов
  # Быстрый «какие порты открыты» на каждом IP
  while read ip; do
    rustscan -a $ip --ulimit 5000 -g | tee scans/${ip}_ports.txt
  done < hosts_alive.txt

  # Полный nmap по найденным портам (пример)
  while read ip; do
    ports=$(grep -oE '[0-9]+' scans/${ip}_ports.txt | paste -sd',' -)
    if [ -z "$ports" ]; then ports="1-65535"; fi
    nmap -sC -sV -Pn -p $ports $ip -oA scans/${ip}_nmap
  done < hosts_alive.txt

  Полезные опции:
  -sC     стандартные NSE-скрипты
  -sV     версии сервисов
  -oA     сохранить во все форматы (N, G, X)
  -Pn     без пинга (на случай фильтрации)
  --script=vuln  (по желанию)

3.3. Веб‑сервисы (80/443/8080/…)
  # Быстрый тех‑осмотр
  whatweb http://IP:PORT
  curl -I http://IP:PORT
  wget -r -l1 -np -R "index.html*" http://IP:PORT/robots.txt || true

  # Брут директория/файлов
  gobuster dir -u http://IP:PORT -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-medium.txt -t 50 -x php,txt,html,js,zip,sql,bak,old

  # Альтернатива
  ffuf -u http://IP:PORT/FUZZ -w /usr/share/seclists/Discovery/Web-Content/common.txt -recursion -recursion-depth 1

  Ищем: /admin, /backup, /.git, /.env, /config.php~, /phpinfo.php, /server-status, /console, Swagger/OpenAPI (/swagger, /api/docs), GraphQL (/graphql).

  Частые находки и приёмы:
  - SQLi: тестовые параметры ' OR 1=1--, отслеживать ошибки; затем sqlmap:
      sqlmap -u "http://IP:PORT/page.php?id=1" --batch --dump --level 5 --risk 2
  - LFI/RFI/Traversal: ../../../../etc/passwd, php://filter, лог‑поисинг (/var/log/*), wrapper expect
  - Инъекции в заголовках: Host, X-Forwarded-For, User-Agent (смотреть логи)
  - Файловые загрузки: обход валидации (двойные расширения .php.jpg, magic bytes), веб‑шелл
  - SSTI/Template‑инъекции: {{7*7}}, ${7*7}, <%=%> и т. п.
  - IDOR: инкремент ID в URL
  - JWT/Session: alg=none, слабый секрет, повторное использование
  - Default creds: admin:admin, admin:password, test:test, guest:guest
  - Комментарии в HTML/JS, скрытые токены, пути к API

3.4. SSH/FTP/Telnet
  # Проверка баннера и брут (если правила CTF разрешают)
  nmap -sV -p22 IP
  hydra -L /usr/share/seclists/Usernames/top-usernames-shortlist.txt -P /usr/share/seclists/Passwords/rockyou.txt ssh://IP -t 4 -I
  ftp IP
  hydra -L users.txt -P pass.txt ftp://IP -t 4 -I

3.5. SMB/Windows‑службы
  nmap -p139,445 --script=smb-enum-shares,smb-enum-users IP
  smbclient -L //IP/ -N
  smbclient //IP/share -N
  enum4linux-ng -A IP

3.6. SNMP/LDAP/DNS/SMTP и прочее
  snmpwalk -v2c -c public IP 1.3.6.1.2.1.1
  ldapsearch -x -H ldap://IP -b "" -s base
  dig @IP any domain.tld
  nc -nv IP 25  # VRFY/EXPN для SMTP

3.7. БД/кэши
  # MySQL
  mysql -h IP -u root -p
  # PostgreSQL
  psql -h IP -U postgres
  # Redis (часто без пароля)
  redis-cli -h IP ping ; redis-cli -h IP keys \*

3.8. Пост‑эксплуатация и поиск флага
  # Локальные поиски на полученной машине
  find / -iname "*flag*" 2>/dev/null
  grep -R "flag{" / -n 2>/dev/null
  env | grep -i flag
  ls -la /home/* /root 2>/dev/null

  Флаг может лежать в:
  - домашней директории приложения/пользователя,
  - /var/www/html/, /opt/, /srv/,
  - базе данных,
  - комментариях страницы/JS,
  - robots.txt, /.well-known/, /flag, /hidden,
  - переменных окружения/конфиге.

3.9. Латеральное перемещение
  - Повторное использование найденных логинов/паролей на других хостах.
  - Сопоставление имён хостов, баннеров и путей на веб‑сервере (часто намёки на другие IP/сервисы).
  - Автотесты/скрипты с паролями в плейнтексте (cron, .git‑история).

===============================================================================
4) ЧЕЙНДЖ-ЛОГ И СБОР ДОКАЗАТЕЛЬСТВ (EVIDENCE)
Структура папок проекта:
  ./scans/   — вывод nmap/masscan/rustscan
  ./http/    — сохранённые страницы, брут‑лог, скриншоты
  ./loot/    — найденные файла/дампы/ключи
  ./notes/   — конспект шагов, команд и результатов

Сохранять ключевые команды и результаты:
  nmap ... -oA scans/IP_nmap
  whatweb ... | tee http/IP_whatweb.txt
  curl -i http://IP/path | tee http/IP_path_headers.txt

===============================================================================
5) КЛАССИФИКАЦИЯ УЯЗВИМОСТЕЙ (быстрые ярлыки)
- A1: Инъекции (SQL/NoSQL/LDAP/OS/Template)
- A2: Нарушение аутентификации/сессий
- A3: Разглашение чувствительных данных (мисконфиг, бэкапы)
- A4: XSS (Reflected/Stored/DOM)
- A5: LFI/RFI/Traversal/Path Injection
- A6: Недостаточная авторизация/IDOR
- A7: Ошибки конфигурации/Default creds
- A8: Необработанные сериализации/десериализации
- A9: Командная инъекция/RCE
- A10: Прочее (стего/крипто/OSINT/форензика)

===============================================================================
6) БЫСТРЫЕ «QUICK‑WINS» ЧЕКЛИСТ
[ ] robots.txt / sitemap.xml
[ ] /.git/ (git-dumper), /.env, /backup/, *.zip, *.sql, *.tar.gz
[ ] Комментарии в HTML/JS (<!-- -->, // TODO)
[ ] Директория listing включена
[ ] Админ‑панель/панель мониторинга с дефолтными логинами
[ ] Веб‑форма входа: SQLi, обход логина, слабый JWT, истекавшие токены
[ ] API: /swagger, непроверенные методы PUT/DELETE, CORS *
[ ] Утечки ключей/токенов в JS
[ ] Файловые инклюды/загрузки
[ ] Сервисы без пароля (Redis, Memcached, Elasticsearch, MongoDB)
[ ] SNMP community 'public'
[ ] SMB открытые шары, guest‑доступ
[ ] Утечки в баннерах и заголовках (Server, X-Powered-By)

===============================================================================
7) ШАБЛОН ОТЧЁТА (вставить в документ и заполнить)

ШАПКА:
- Участник: <ФИО> / <логин>
- Дата/время теста: <...>
- Диапазон: 10.24.240.0/20
- Обнаруженные целевые хосты: <IP1, IP2, IP3>

Таблица уязвимостей/задач (одна строка — одна задача):
| № | Хост/IP | Название задачи/уязвимости | Класс | Порт/Сервис | Флаг (строка) | Кратко: суть | Риск |
|---|---------|-----------------------------|-------|-------------|---------------|--------------|------|

Подробное описание каждой записи:
1) Название задачи: <...>
   Хост/IP/Порт: <...>
   Классификация: <…>
   Предпосылки/доступ: <…>
   Алгоритм эксплуатации (шаги):
     - Шаг 1: ...
     - Шаг 2: ...
     - Шаг 3: ...
   Команды/скрипты:
     <вставить команды/вывод (ключевые строки)>
   Доказательства:
     - скриншоты/логи: scans/<...>, http/<...>
   Извлечённые данные/флаг:
     flag{...}  (или иной формат)
   Рекомендации/фикс:
     - <кратко>

Приложения (если применимо):
- Криптозадача: описание алгоритма и ключей, код/псевдокод.
- Трафик/pcap: время и контекст передачи, фильтры Wireshark/tshark.
- Реверс/форензика: используемые утилиты, последовательность действий, код для извлечения.

===============================================================================
8) ПРИМЕР «МИНИ‑СКРИПТА» ДЛЯ АВТО‑РАЗВЕДКИ
Создайте файл recon.sh (пример):
----------------------------------
#!/usr/bin/env bash
set -e
NET="10.24.240.0/20"
OUT="scans"
mkdir -p "$OUT"
echo "[*] Ping sweep..."
nmap -sn $NET -oA $OUT/00_ping_sweep
grep "Status: Up" $OUT/00_ping_sweep.gnmap | awk '{print $2}' > hosts_alive.txt
echo "[*] Found hosts:"
cat hosts_alive.txt
echo "[*] Port scan (rustscan -> nmap)..."
while read ip; do
  echo "[*] $ip"
  rustscan -a $ip --ulimit 5000 -g | tee $OUT/${ip}_ports.txt
  ports=$(grep -oE '[0-9]+' $OUT/${ip}_ports.txt | paste -sd',' -)
  [ -z "$ports" ] && ports="1-65535"
  nmap -sC -sV -Pn -p $ports $ip -oA $OUT/${ip}_nmap
done < hosts_alive.txt
----------------------------------
Запуск: chmod +x recon.sh && ./recon.sh

===============================================================================
9) ТАЙМ‑МЕНЕДЖМЕНТ (пример на 8 часов)
- Час 1: Расчёт сети, живые хосты, быстрый порт‑скан
- Час 2–3: Глубокий скан/whatweb/dirbusting каждого веб‑хоста
- Час 4–5: Эксплуатация (логины, SQLi, LFI, загрузки, слабые сервисы)
- Час 6: Латеральное перемещение/повтор логинов на других хостах
- Час 7: Сбор флагов, проверка воспроизводимости
- Час 8: Сведение отчёта и артефактов

===============================================================================
10) ЧАСТЫЕ ЛОВУШКИ
- Запуск тяжёлых сканов на весь /20 без ограничения → потеря времени. Сначала ping‑sweep.
- Пропуск HTTPS → зайти и на http:// и на https:// (сертификат может подсказать домены).
- Отсутствие логгирования команд → сложно повторить. Всегда tee/‑oA.
- Брут куда нельзя — проверяйте правила соревнования.
- Забыли проверить robots.txt, /.git, /.env — самые быстрые флаги часто там.

===============================================================================
11) ЧТО СДАТЬ (CHECKLIST)
[ ] Список 3 целевых IP и их открытые порты (сканы приложены)
[ ] Для каждого IP — минимум один флаг/уязвимость и описание эксплуатации
[ ] Таблица задач (см. шаблон)
[ ] Скрины/логи, подтверждающие получение флагов
[ ] Выводы и рекомендации (1–3 пункта на уязвимость)
[ ] Шапка: логин и ФИО

Удачи! Делайте шаги воспроизводимыми: чтобы другой участник смог повторить ваши действия и получить тот же флаг.
